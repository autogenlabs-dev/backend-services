# This workflow will deploy the User Management Backend to your EC2 instance
# when there is a push to the "main" branch.

name: Deploy to EC2 (AWS)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'user-management-backend/**'

env:
  AWS_REGION: ap-south-1                     # Your AWS region (Mumbai)
  EC2_INSTANCE_ID: i-0d9d2fd36b0527c07      # Your EC2 instance ID
  EC2_HOST: 13.234.18.159                   # Your EC2 public IP
  EC2_USER: ubuntu                          # SSH user for EC2
  APPLICATION_NAME: user-management-backend  # Application name

permissions:
  contents: read

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        cd user-management-backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx

    - name: Run tests
      env:
        DATABASE_URL: mongodb://localhost:27017/test_db
        REDIS_URL: redis://localhost:6379
        JWT_SECRET_KEY: test-secret-key-for-testing-only
        ENVIRONMENT: testing
      run: |
        cd user-management-backend
        # Add your test commands here
        echo "Tests completed successfully"

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Add EC2 to known hosts
      run: |
        ssh-keyscan -H ${{ env.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to EC2
      run: |
        ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          # Check if repository exists, if not clone it
          if [ ! -d "backend-services" ]; then
            echo "Repository not found, cloning..."
            git clone https://github.com/autogenlabs-dev/backend-services.git
          fi
          
          # Navigate to project directory
          cd backend-services/user-management-backend
          
          # Pull latest changes
          git pull origin main
          
          # Backup current environment
          if [ -f .env.production ]; then
            cp .env.production .env.production.backup.$(date +%Y%m%d_%H%M%S)
          fi
          
          # Update production database URL
          echo "üîÑ Updating production MongoDB connection..."
          if [ -f .env.production ]; then
            # Update the database URL in .env.production
            sed -i 's|DATABASE_URL=.*|DATABASE_URL=mongodb+srv://autogencodebuilder:DataOnline@autogen.jf0j0.mongodb.net/user_management_db?retryWrites=true\&w=majority\&connectTimeoutMS=60000\&socketTimeoutMS=60000|' .env.production
            echo "‚úÖ Database URL updated successfully"
          else
            echo "‚ö†Ô∏è .env.production file not found, creating one..."
            # Create basic .env.production if it doesn't exist
            cat > .env.production << 'ENVEOF'
DATABASE_URL=mongodb+srv://autogencodebuilder:DataOnline@autogen.jf0j0.mongodb.net/user_management_db?retryWrites=true&w=majority&connectTimeoutMS=60000&socketTimeoutMS=60000
PORT=8001
ENVIRONMENT=production
ENVEOF
          fi
          
          # Create virtual environment if it doesn't exist
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi
          
          # Activate virtual environment
          source venv/bin/activate
          
          # Install/update dependencies
          pip install -r requirements.txt
          
          # Run database migrations (if alembic is configured)
          if [ -f "alembic.ini" ]; then
            alembic upgrade head
          fi
          
          # Check if systemd service exists, if not create it
          if ! sudo systemctl list-unit-files | grep -q "user-management-backend.service"; then
            echo "Service not found, running initial setup..."
            chmod +x ec2-deploy.sh
            ./ec2-deploy.sh
          else
            # Just restart existing service
            sudo systemctl restart user-management-backend
            sudo systemctl restart nginx
          fi
          
          # Wait for service to start
          sleep 15
          
          # Check service status
          sudo systemctl status user-management-backend --no-pager
          
          echo "‚úÖ Deployment completed successfully!"
        EOF

    - name: Health Check
      run: |
        # Wait for service to fully start
        sleep 30
        
        # Check if the API is responding
        echo "Checking health at http://${{ env.EC2_HOST }}:8001/health"
        for i in {1..5}; do
          if curl -f http://${{ env.EC2_HOST }}:8001/health; then
            echo "‚úÖ Health check passed on attempt $i"
            break
          elif curl -f http://${{ env.EC2_HOST }}:8001/; then
            echo "‚úÖ Main endpoint responding on attempt $i"
            break
          else
            echo "‚è≥ Health check attempt $i failed, retrying..."
            sleep 10
          fi
        done

    - name: Notify Success
      if: success()
      run: |
        echo "üöÄ Deployment to EC2 completed successfully!"
        echo "üåê Application is running at: http://${{ env.EC2_HOST }}:8001"
        echo "üìä Health Check: http://${{ env.EC2_HOST }}:8001/health"
        echo "üìñ API Docs: http://${{ env.EC2_HOST }}:8001/docs"

    - name: Rollback on Failure
      if: failure()
      run: |
        ssh ${{ env.EC2_USER }}@${{ env.EC2_HOST }} << 'EOF'
          cd backend-services/user-management-backend
          
          # Find and restore latest backup
          BACKUP_FILE=$(ls -t .env.production.backup.* 2>/dev/null | head -n1)
          if [ -n "$BACKUP_FILE" ]; then
            echo "Restoring from: $BACKUP_FILE"
            cp "$BACKUP_FILE" .env.production
          fi
          
          # Restart service with previous configuration
          sudo systemctl restart user-management-backend
          
          echo "‚ö†Ô∏è Rollback completed due to deployment failure"
        EOF


